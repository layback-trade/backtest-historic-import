generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportStatus {
  RUNNING
  COMPLETED
  FAILED
}

model Import {
  id                    String       @id
  createdAt             DateTime     @default(now())
  status                ImportStatus
  endedAt               DateTime?
  startDate             DateTime?
  endDate               DateTime?
  specificEventId       String?
  eventsAdded           Int?
  totalEvents           Int?
  totalEventsWithMarket Int?

  @@map("imports")
}

model Team {
  name             String
  id               Int     @id
  eventsAsAwayTeam Event[] @relation("eventAsAwayTeam")
  eventsAsHomeTeam Event[] @relation("eventAsHomeTeam")

  @@map("teams")
}

model Competition {
  id        Int     @id
  name      String
  countryId String?
  events    Event[]

  @@map("competitions")
}

model Event {
  id                                                  Int               @id
  name                                                String
  startDate                                           DateTime
  firstHalfStart                                      DateTime?
  firstHalfEnd                                        DateTime?
  secondHalfStart                                     DateTime?
  secondHalfEnd                                       DateTime?
  homeTeamId                                          Int
  awayTeamId                                          Int
  competitionId                                       Int
  homeTeamScore                                       Int
  awayTeamScore                                       Int
  homeTeamHTScore                                     Int
  awayTeamHTScore                                     Int
  competition                                         Competition       @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  homeTeam                                            Team              @relation("eventAsHomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  awayTeam                                            Team              @relation("eventAsAwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  lastteammatches_lastteammatches_eventidlastToevents lastteammatches[] @relation("lastteammatches_eventidlastToevents")
  lastteammatches_lastteammatches_idToevents          lastteammatches[] @relation("lastteammatches_idToevents")
  markets                                             Market[]
  Statistic                                           Statistic[]

  @@index([startDate])
  @@map("events")
}

model Market {
  id           String         @id
  eventId      Int
  type         String
  event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  selections   Selection[]
  SelectionOdd SelectionOdd[]

  @@index([type, eventId])
  @@map("markets")
}

model Selection {
  id        Int
  name      String
  market    Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId  String
  odd       Float
  hasInPlay Boolean? @default(false)
  hasAlert  Boolean? @default(false)

  selectionOdds SelectionOdd[]

  @@id([id, marketId])
  @@index([marketId])
  @@map("selections")
}

model SelectionOdd {
  selectionId    Int
  marketId       String
  gameTime       Int
  gameTimeStatus String
  gameTimePeriod Float
  isArtificial   Boolean
  odd            Float
  marketStatus   String
  createdAt      DateTime?
  staledAt       DateTime

  selection Selection @relation(fields: [selectionId, marketId], references: [id, marketId], onDelete: Cascade)
  market    Market    @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@id([selectionId, marketId, gameTime, gameTimeStatus])
  @@map("selections_odd")
}

// enum GameTimeStatus {
//   PRELIVE
//   FIRST_HALF
//   INTERVAL
//   SECOND_HALF
// }

model Statistic {
  eventId           Int
  type              String // StatisticType
  gameTime          Int
  gameTimeStatus    String
  gameTimePeriod    Int?
  status            String?
  teamSide          String // home or away 
  value             Int
  oppositeSideValue Int
  originalGameTime  Int
  createdAt         DateTime
  staledAt          DateTime?

  event Event @relation(fields: [eventId], references: [id])

  @@id([eventId, type, gameTime, gameTimeStatus, teamSide])
}

enum StatisticType {
  GOAL
  POSSESSION
  ATTACK
  CORNER
  DANGEROUS_ATTACK
  SUBSTITUTION
  PENALTY
  RED_CARD
  YELLOW_CARD
  // SHOT
  SHOT_ON_TARGET
  SHOT_OFF_TARGET
}

model lastteammatches {
  id                                         Int
  eventidlast                                Int
  id_mesmo_mando                             String @db.Char(1)
  id_mesma_competicao                        String @db.Char(1)
  qt_jogo_passado_casa                       Int
  qt_jogo_passado_fora                       Int
  events_lastteammatches_eventidlastToevents Event  @relation("lastteammatches_eventidlastToevents", fields: [eventidlast], references: [id], onDelete: NoAction, onUpdate: NoAction)
  events_lastteammatches_idToevents          Event  @relation("lastteammatches_idToevents", fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([id, eventidlast])
}
